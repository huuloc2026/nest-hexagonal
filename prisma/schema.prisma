generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(uuid())
    email     String   @unique
    password  String
    name      String
    role      Role     @default(USER)
    salt      String
    address   Address?
    orders    Order[]
    cart      Cart?
    reviews   Review[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Address {
    id      String @id @default(uuid())
    userId  String @unique
    user    User   @relation(fields: [userId], references: [id])
    street  String
    city    String
    country String
    zipCode String
}

model Product {
    id          String           @id @default(uuid())
    name        String
    description String
    price       Decimal
    stock       Int
    category    Category         @default(ACCESSORY)
    variants    ProductVariant[]
    reviews     Review[]
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    CartItem    CartItem[]
    OrderItem   OrderItem[]
}

model ProductVariant {
    id        String  @id @default(uuid())
    productId String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    color     String?
    size      String?
    weight    Float?
    stock     Int
}

model Cart {
    id     String     @id @default(uuid())
    userId String     @unique
    user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    items  CartItem[]
}

model CartItem {
    id        String  @id @default(uuid())
    cartId    String
    cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
    productId String
    product   Product @relation(fields: [productId], references: [id])
    quantity  Int     @default(1)
}

model Order {
    id          String      @id @default(uuid())
    userId      String
    user        User        @relation(fields: [userId], references: [id])
    items       OrderItem[]
    totalAmount Decimal
    status      OrderStatus @default(PENDING)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model OrderItem {
    id        String  @id @default(uuid())
    orderId   String
    order     Order   @relation(fields: [orderId], references: [id])
    productId String
    product   Product @relation(fields: [productId], references: [id])
    quantity  Int
    price     Decimal
}

model Review {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    productId String
    product   Product  @relation(fields: [productId], references: [id])
    rating    Int      @default(5) // 1-5 sao
    comment   String?
    createdAt DateTime @default(now())
}

model Coupon {
    id        String   @id @default(uuid())
    code      String   @unique
    discount  Decimal // % giảm giá hoặc số tiền cố định
    expiresAt DateTime
    isActive  Boolean  @default(true)
}

enum Role {
    USER
    ADMIN
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELED
}

enum Category {
    RACKET
    BALL
    SHOES
    CLOTHING
    ACCESSORY
}
